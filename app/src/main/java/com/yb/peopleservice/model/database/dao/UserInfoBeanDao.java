package com.yb.peopleservice.model.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yb.peopleservice.model.database.bean.UserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, String> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Nickname = new Property(2, String.class, "nickname", false, "NICKNAME");
        public final static Property TotalPoints = new Property(3, int.class, "totalPoints", false, "TOTAL_POINTS");
        public final static Property Level = new Property(4, int.class, "level", false, "LEVEL");
        public final static Property Member = new Property(5, int.class, "member", false, "MEMBER");
        public final static Property HeadImg = new Property(6, String.class, "headImg", false, "HEAD_IMG");
        public final static Property Phone = new Property(7, String.class, "phone", false, "PHONE");
        public final static Property OrderNumber = new Property(8, Integer.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property Age = new Property(9, int.class, "age", false, "AGE");
        public final static Property Birthday = new Property(10, String.class, "birthday", false, "BIRTHDAY");
        public final static Property Sex = new Property(11, String.class, "sex", false, "SEX");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"NICKNAME\" TEXT," + // 2: nickname
                "\"TOTAL_POINTS\" INTEGER NOT NULL ," + // 3: totalPoints
                "\"LEVEL\" INTEGER NOT NULL ," + // 4: level
                "\"MEMBER\" INTEGER NOT NULL ," + // 5: member
                "\"HEAD_IMG\" TEXT," + // 6: headImg
                "\"PHONE\" TEXT," + // 7: phone
                "\"ORDER_NUMBER\" INTEGER," + // 8: orderNumber
                "\"AGE\" INTEGER NOT NULL ," + // 9: age
                "\"BIRTHDAY\" TEXT," + // 10: birthday
                "\"SEX\" TEXT);"); // 11: sex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getTotalPoints());
        stmt.bindLong(5, entity.getLevel());
        stmt.bindLong(6, entity.getMember());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(7, headImg);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        Integer orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindLong(9, orderNumber);
        }
        stmt.bindLong(10, entity.getAge());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String nickname = entity.getNickname();
        if (nickname != null) {
            stmt.bindString(3, nickname);
        }
        stmt.bindLong(4, entity.getTotalPoints());
        stmt.bindLong(5, entity.getLevel());
        stmt.bindLong(6, entity.getMember());
 
        String headImg = entity.getHeadImg();
        if (headImg != null) {
            stmt.bindString(7, headImg);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(8, phone);
        }
 
        Integer orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindLong(9, orderNumber);
        }
        stmt.bindLong(10, entity.getAge());
 
        String birthday = entity.getBirthday();
        if (birthday != null) {
            stmt.bindString(11, birthday);
        }
 
        String sex = entity.getSex();
        if (sex != null) {
            stmt.bindString(12, sex);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nickname
            cursor.getInt(offset + 3), // totalPoints
            cursor.getInt(offset + 4), // level
            cursor.getInt(offset + 5), // member
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // headImg
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // phone
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // orderNumber
            cursor.getInt(offset + 9), // age
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // birthday
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // sex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNickname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTotalPoints(cursor.getInt(offset + 3));
        entity.setLevel(cursor.getInt(offset + 4));
        entity.setMember(cursor.getInt(offset + 5));
        entity.setHeadImg(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPhone(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setAge(cursor.getInt(offset + 9));
        entity.setBirthday(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSex(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
